import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

#Dataset
Data=pd.read_csv("iris.data",sep=","
                 ,header=None,
                 names=(["sepal length in cm","sepal width in cm",
                         "petal length in cm",
                         "petal width in cm",
                         "class" ]))
                   
                   
#Target
y= Data["class"]

#Feature to drop
To_Drop=["class","sepal length in cm","petal width in cm"]

#Feature to keep
X=Data.drop(To_Drop,axis=1)

#choosing to create 3 clusters
kmeans=KMeans(n_clusters=3)
kmeans.fit(X)

#create a column to store assigned clusters
X["Cluster"]=kmeans.labels_

#create transformer to turn categorical data to numerical data
Encoder=LabelEncoder()
X["Actual class"]=Encoder.fit_transform(y)

#validation
Valid=np.count_nonzero(np.where(X["Actual class"]==X["Cluster"]))/150


#print out a clustered scatterplot with centroids printed
Class=["Iris-setosa","Iris-versicolor","Iris-virginica"]
for i in range(3):
    
    x=X.loc[X["Cluster"]==i,["sepal width in cm"]]
    y=X.loc[X["Cluster"]==i,["petal length in cm"]]
    plt.scatter(x,y,s=50,cmap="PiYG")
    
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=50,c="black")   
plt.legend(labels=Class)
plt.title("sklearn based Kmeans on Iris data")
